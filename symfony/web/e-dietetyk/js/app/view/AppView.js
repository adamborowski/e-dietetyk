// Generated by CoffeeScript 1.6.3
(function() {
  Ext.define('app.view.AppView', {
    extend: 'Ext.Container',
    requires: ['app.view.HumanView', 'app.helpers.BodyCalculator', 'app.helpers.kinetic.StageWrapper', 'app.helpers.kinetic.ShapeWrapper', 'app.helpers.kinetic.GroupWrapper', 'app.view.human.Corps', 'app.view.human.Legs', 'app.view.human.Neck', 'app.view.human.Arm', 'app.view.human.Hand', 'app.view.human.Head', 'app.view.human.Breast'],
    createFatControls: function(title, imgSrc, sliderId, sliderMin, sliderMax) {
      return {
        xtype: 'container',
        cls: 'fat-control',
        layout: {
          type: 'vbox',
          align: 'right'
        },
        padding: 10,
        items: [
          {
            xtype: 'label',
            cls: 'fat-control-title',
            html: title,
            width: 200
          }, {
            xtype: 'image',
            src: imgSrc,
            width: 200,
            height: 200
          }, {
            margin: '-25px 0px 10px 0',
            height: 25,
            xtype: 'label',
            text: "" + (Math.floor(sliderMin + sliderMax) / 2) + " mm",
            itemId: "" + sliderId + "_label",
            cls: 'fat-control-indicator'
          }, {
            xtype: 'slider',
            width: 200,
            itemId: sliderId,
            useTips: false,
            minValue: sliderMin,
            maxValue: sliderMax,
            value: Math.floor(sliderMin + sliderMax) / 2,
            margin: 5,
            listeners: {
              scope: this,
              change: function(self, val) {
                this.down("#" + sliderId + "_label").setText("" + val + " mm");
                return this.updateHandler();
              }
            }
          }
        ]
      };
    },
    loadProfile: function(data) {
      var bd, d, me;
      this.profileInitialData = data;
      me = this;
      d = function(id) {
        return me.down("#" + id);
      };
      d('firstNameInput').setValue(data.imie);
      d('lastNameInput').setValue(data.nazwisko);
      d('ageInput').setValue(data.wiek);
      d('weightInput').setValue(data.waga);
      d('heightInput').setValue(data.wzrost);
      bd = data.bodyDensity;
      if (data.plec === 'kobieta') {
        this.down('#femaleRadio').setValue(true);
        this.down('#maleRadio').setValue(false);
        this.down('#woman_slider_biodro').setValue(bd.biodro);
        this.down('#woman_slider_triceps').setValue(bd.triceps);
        this.down('#woman_slider_udo').setValue(bd.udo);
      } else {
        this.down('#femaleRadio').setValue(false);
        this.down('#maleRadio').setValue(true);
        this.down('#man_slider_klatka').setValue(bd.klatka);
        this.down('#man_slider_pepek').setValue(bd.pepek);
        this.down('#man_slider_udo').setValue(bd.udo);
      }
      console.log("Loading profile with saveURL = " + data.saveUrl);
      this.updateHandler();
    },
    constructor: function(config) {
      var me;
      me = this;
      Ext.applyIf(config, {
        layout: 'fit',
        items: [
          {
            xtype: 'container',
            title: 'Profil Użytkownika',
            layout: {
              type: 'hbox'
            },
            items: [
              {
                xtype: 'form',
                itemId: 'profileForm',
                border: false,
                method: 'POST',
                defaults: {
                  margin: 20
                },
                buttons: [
                  {
                    text: "Zapisz",
                    handler: function() {
                      var bd, form, isFemale, params;
                      form = this.up("form").getForm();
                      isFemale = me.down('#femaleRadio').getValue();
                      if (isFemale) {
                        bd = {
                          udo: me.down('#woman_slider_udo').getValue(),
                          biodro: me.down('#woman_slider_biodro').getValue(),
                          triceps: me.down('#woman_slider_triceps').getValue()
                        };
                      } else {
                        bd = {
                          udo: me.down('#man_slider_udo').getValue(),
                          pepek: me.down('#man_slider_pepek').getValue(),
                          klatka: me.down('#man_slider_klatka').getValue()
                        };
                      }
                      params = {
                        imie: me.down('#firstNameInput').getValue(),
                        nazwisko: me.down('#lastNameInput').getValue(),
                        wiek: me.down('#ageInput').getValue(),
                        waga: me.down('#weightInput').getValue(),
                        wzrost: me.down('#heightInput').getValue(),
                        plec: (isFemale ? 'kobieta' : 'mężczyzna'),
                        bodyDensity: bd
                      };
                      return form.submit({
                        url: me.profileInitialData.saveUrl,
                        params: {
                          data: JSON.stringify(params)
                        },
                        success: function(form, action) {
                          return Ext.Msg.alert("Powodzenie", "Zmiany zostały zapamiętane");
                        },
                        failure: function(form, action) {
                          console.error(action.result);
                          return Ext.Msg.alert("Błąd", "Niestety, nie udało się zapisać danych. Więcej informacji mozna znaleźć w logach przegądarki");
                        }
                      });
                    }
                  }
                ],
                items: [
                  {
                    xtype: 'fieldcontainer',
                    fieldLabel: 'Imię i Nazwisko',
                    layout: {
                      type: 'hbox'
                    },
                    items: [
                      {
                        xtype: 'textfield',
                        itemId: 'firstNameInput',
                        width: 100,
                        listeners: {
                          change: {
                            fn: this.updateHandler,
                            scope: this
                          }
                        }
                      }, {
                        padding: '0 0 0 10',
                        xtype: 'textfield',
                        itemId: 'lastNameInput',
                        width: 150,
                        listeners: {
                          change: {
                            fn: this.updateHandler,
                            scope: this
                          }
                        }
                      }
                    ]
                  }, {
                    xtype: 'fieldcontainer',
                    fieldLabel: 'Płeć',
                    defaultType: 'radiofield',
                    layout: 'hbox',
                    defaults: {
                      margin: '0 20px'
                    },
                    items: [
                      {
                        boxLabel: 'mężczyzna',
                        name: 'size',
                        inputValue: 'male',
                        itemId: 'maleRadio',
                        listeners: {
                          change: {
                            fn: this.updateHandler,
                            scope: this
                          }
                        }
                      }, {
                        boxLabel: 'kobieta',
                        name: 'size',
                        inputValue: 'female',
                        checked: true,
                        itemId: 'femaleRadio',
                        listeners: {
                          change: {
                            fn: this.updateHandler,
                            scope: this
                          }
                        }
                      }
                    ]
                  }, {
                    xtype: 'numberfield',
                    itemId: 'ageInput',
                    fieldLabel: 'Wiek',
                    step: 1,
                    value: 21,
                    minValue: 18,
                    maxValue: 55,
                    width: 180,
                    listeners: {
                      change: {
                        fn: this.updateHandler,
                        scope: this
                      }
                    }
                  }, {
                    xtype: 'fieldcontainer',
                    layout: 'hbox',
                    itemId: 'man_fat',
                    hidden: true,
                    cls: 'fat',
                    fieldLabel: 'Pomiar tłuszczu',
                    items: [this.createFatControls('pępek', app.url('e-dietetyk/images/measurements/man_pepek.png'), 'man_slider_pepek', 0, 100), this.createFatControls('udo', app.url('e-dietetyk/images/measurements/man_udo.png'), 'man_slider_udo', 0, 150), this.createFatControls('klatka', app.url('e-dietetyk/images/measurements/man_klatka.png'), 'man_slider_klatka', 0, 100)]
                  }, {
                    xtype: 'fieldcontainer',
                    layout: 'hbox',
                    itemId: 'woman_fat',
                    fieldLabel: 'Pomiar tłuszczu',
                    cls: 'fat',
                    items: [this.createFatControls('biodro', app.url('e-dietetyk/images/measurements/woman_biodro.png'), 'woman_slider_biodro', 0, 80), this.createFatControls('udo', app.url('e-dietetyk/images/measurements/woman_udo.png'), 'woman_slider_udo', 0, 90), this.createFatControls('triceps', app.url('e-dietetyk/images/measurements/woman_triceps.png'), 'woman_slider_triceps', 0, 60)]
                  }, {
                    xtype: 'fieldcontainer',
                    fieldLabel: '<i>Body Density</i>',
                    items: [
                      {
                        xtype: 'label',
                        itemId: 'densityOutput',
                        cls: 'body-density-info',
                        text: '15%'
                      }
                    ]
                  }, {
                    xtype: 'slider',
                    itemId: 'weightInput',
                    fieldLabel: 'waga [kg]',
                    minValue: 40,
                    value: 60,
                    maxValue: 200,
                    width: 400,
                    listeners: {
                      change: {
                        fn: this.updateHandler,
                        scope: this
                      }
                    }
                  }, {
                    xtype: 'slider',
                    itemId: 'heightInput',
                    fieldLabel: 'wzrost [cm]',
                    minValue: 140,
                    maxValue: 220,
                    value: 170,
                    width: 400,
                    listeners: {
                      change: {
                        fn: this.updateHandler,
                        scope: this
                      }
                    }
                  }
                ]
              }, {
                flex: false,
                width: 295,
                height: 557,
                xtype: 'kineticstage',
                itemId: 'stage',
                margin: '0 0 0 10'
              }
            ]
          }
        ]
      });
      this.callParent(arguments);
      this.loadAssets();
    },
    loadAssets: function() {
      var me, numToLoad;
      numToLoad = 2;
      me = this;
      this.images = {
        man: new Image(),
        woman: new Image()
      };
      this.images.man.onload = function() {
        numToLoad--;
        if (numToLoad === 0) {
          return me.startApp();
        }
      };
      this.images.woman.onload = this.images.man.onload;
      this.images.man.src = app.url('e-dietetyk/images/man.png');
      return this.images.woman.src = app.url('e-dietetyk/images/woman.png');
    },
    startApp: function() {
      var body, mainLayer, me;
      mainLayer = this.down('#stage').mainLayer;
      this.body = body = Ext.create('app.view.human.Corps', {
        initialAttrs: {
          fill: 'green'
        }
      });
      this.legs = Ext.create('app.view.human.Legs', {
        layoutX: 0.1,
        layoutY: 0.45,
        layoutWidth: 0.8,
        layoutHeight: 0.55,
        initialAttrs: {
          fill: 'orange'
        }
      });
      this.neck = Ext.create('app.view.human.Neck', {
        layoutX: 0.3,
        layoutWidth: 0.4,
        layoutY: -0.2,
        layoutHeight: 0.3,
        initialAttrs: {
          fill: '#FFC276'
        }
      });
      this.breast = Ext.create('app.view.human.Breast', {
        layoutX: 0.20,
        layoutY: 0.20,
        layoutWidth: 0.27,
        layoutHeight: 0.6
      });
      this.breast2 = Ext.create('app.view.human.Breast', {
        layoutX: 1 - 0.20,
        layoutY: 0.20,
        layoutWidth: 0.27,
        layoutHeight: 0.6,
        initialAttrs: {
          scaleX: -1
        }
      });
      this.leftArm = Ext.create('app.view.human.Arm', {
        layoutX: -0.27,
        layoutWidth: 0.4,
        layoutY: 0.05,
        layoutHeight: 1.1,
        initialAttrs: {
          fill: '#0CA100'
        }
      });
      this.rightArm = Ext.create('app.view.human.Arm', {
        layoutX: 1.27,
        layoutWidth: 0.4,
        layoutY: 0.05,
        layoutHeight: 1.1,
        initialAttrs: {
          fill: '#0CA100',
          scaleX: -1
        }
      });
      this.leftHand = Ext.create('app.view.human.Hand', {
        layoutWidth: 6,
        relativeWidth: false,
        layoutHeight: 6,
        relativeHeight: false,
        layoutY: 1.16,
        layoutX: -0.21,
        initialAttrs: {
          fill: '#FFBE6D'
        }
      });
      this.rightHand = Ext.create('app.view.human.Hand', {
        layoutWidth: 6,
        relativeWidth: false,
        layoutHeight: 6,
        relativeHeight: false,
        layoutY: 1.16,
        layoutX: 1.21,
        initialAttrs: {
          fill: '#FFBE6D'
        }
      });
      this.head = Ext.create('app.view.human.Head', {
        initialAttrs: {
          fill: 'transparent',
          strokeEnabled: false
        },
        image: this.images.woman,
        layoutX: 0.15,
        layoutWidth: 0.7,
        layoutHeight: 0.3,
        layoutY: -0.3
      });
      this.group = mainLayer.add({
        wtype: 'group',
        layoutX: 0.21,
        layoutY: 0.3,
        layoutWidth: 1,
        layoutHeight: 1
      });
      this.group.add(this.neck);
      this.group.add(this.legs);
      this.group.add({
        wtype: 'group',
        children: [this.leftHand, this.rightHand, this.leftArm, this.rightArm, this.body, this.breast, this.breast2],
        layoutX: 0,
        layoutY: 0,
        layoutWidth: 1,
        layoutHeight: 0.45
      });
      this.group.add(this.head);
      me = this;
      return window.requestAnimationFrame(function() {
        if (window.extLoadCallback != null) {
          window.extLoadCallback(me);
        }
        return me.updateHandler();
      });
    },
    updateHandler: function() {
      var age, bd, dens, isFemale, opts, weight;
      bd = (this.down('#weightInput').getValue() - 70) / -400;
      isFemale = this.down('#femaleRadio').getValue();
      age = this.down('#ageInput').getValue();
      this.head.setImage(isFemale ? this.images.woman : this.images.man);
      this.breast.setFemale(isFemale);
      this.breast2.setFemale(isFemale);
      if (isFemale) {
        this.down('#woman_fat').setVisible(true);
        this.down('#man_fat').setVisible(false);
        Ext.fly('ext-body-women').setDisplayed(true);
        Ext.fly('ext-body-men').setDisplayed(false);
        opts = {
          biodro: this.down('#woman_slider_biodro').getValue(),
          triceps: this.down('#woman_slider_triceps').getValue(),
          udo: this.down('#woman_slider_udo').getValue()
        };
        dens = app.helpers.BodyCalculator.bodyDensity(false, age, opts);
      } else {
        this.down('#woman_fat').setVisible(false);
        this.down('#man_fat').setVisible(true);
        Ext.fly('ext-body-women').setDisplayed(false);
        Ext.fly('ext-body-men').setDisplayed(true);
        opts = {
          klatka: this.down('#man_slider_klatka').getValue(),
          pepek: this.down('#man_slider_pepek').getValue(),
          udo: this.down('#man_slider_udo').getValue()
        };
        dens = app.helpers.BodyCalculator.bodyDensity(true, age, opts);
      }
      this.down('#densityOutput').setText(Ext.util.Format.number(dens * 100, "0.0%") + " <i>(reference: Jackson, et al. (1980), based on a sample aged 18-55)</i>", false);
      Ext.fly('ext-body-density-output').setHTML(Ext.util.Format.number(dens * 100, "0.0%"));
      weight = Math.sqrt(this.down('#weightInput').getValue()) / 40;
      this.group.setLayoutWidth((weight * 0.7 + dens * 0.3) * 1.5);
      this.group.setLayoutHeight((Math.sqrt(this.down('#heightInput').getValue()) / 20) * 0.8);
      this.group.invalidate();
      bd = dens * 0.7 + weight * 0.3;
      this.body.setBodyDensity(bd);
      this.breast.setBodyDensity(bd);
      this.breast.setAge(age);
      this.breast2.setBodyDensity(bd);
      this.breast2.setAge(age);
      this.legs.setBodyDensity(bd);
      this.neck.setBodyDensity(bd);
      this.leftArm.setBodyDensity(bd);
      this.leftHand.setBodyDensity(bd);
      this.rightArm.setBodyDensity(bd);
      return this.rightHand.setBodyDensity(bd);
    }
  });

}).call(this);
