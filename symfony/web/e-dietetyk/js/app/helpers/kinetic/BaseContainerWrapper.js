// Generated by CoffeeScript 1.6.3
(function() {
  Ext.define('app.helpers.kinetic.BaseContainerWrapper', {
    extend: 'app.helpers.kinetic.BaseWrapper',
    updateLayout: function(x, y, w, h) {
      var child, _i, _len, _ref, _results;
      _ref = this.getChildren();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        _results.push(child.doLayout(w, h));
      }
      return _results;
    },
    config: {
      children: []
    },
    applyChildren: function(children) {
      var child, _i, _len;
      children = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = children.length; _i < _len; _i++) {
          child = children[_i];
          _results.push(this.convertChild(child));
        }
        return _results;
      }).call(this);
      for (_i = 0, _len = children.length; _i < _len; _i++) {
        child = children[_i];
        this.kineticObject.add(child.get());
      }
      return children;
    },
    convertChild: function(child) {
      var kineticObjet, wtype;
      if (child instanceof app.helpers.kinetic.BaseWrapper) {
        return child;
      }
      if (Ext.isObject(child)) {
        if (child.wtype != null) {
          wtype = child.wtype;
          delete child.wtype;
          if (child.kineticObject == null) {
            kineticObjet = child.kineticObject;
            delete child.kineticObject;
          }
          return Ext.createByAlias("kinetic.wrapper." + wtype, child, kineticObjet);
        } else {
          throw new Error('You must provide wtype property for child config');
        }
      }
      throw new Error('Conversion not supported for this child specification');
    },
    add: function(children) {
      var chid, child, configChildren, convertedChild, convertedChildren, _i, _j, _k, _len, _len1, _len2;
      configChildren = this.getChildren();
      if (Ext.isArray(children)) {
        for (_i = 0, _len = children.length; _i < _len; _i++) {
          child = children[_i];
          convertedChildren = this.convertChild(child);
        }
        for (_j = 0, _len1 = convertedChildren.length; _j < _len1; _j++) {
          child = convertedChildren[_j];
          configChildren.push(child);
        }
        for (_k = 0, _len2 = convertedChildren.length; _k < _len2; _k++) {
          chid = convertedChildren[_k];
          this.kineticObject.add(child.get());
        }
        return convertedChildren;
      } else {
        child = children;
        convertedChild = this.convertChild(child);
        configChildren.push(convertedChild);
        this.kineticObject.add(convertedChild.get());
        return convertedChild;
      }
    }
  });

}).call(this);

//# sourceMappingURL=BaseContainerWrapper.map
