// Generated by CoffeeScript 1.6.3
(function() {
  Ext.define('app.helpers.kinetic.ComponentWrapper', {
    extend: 'app.helpers.kinetic.BaseWrapper',
    updateLayout: function(x, y, w, h) {
      this.currentX = x;
      this.currentY = y;
      this.currentWidth = w;
      return this.currentHeight = h;
    },
    constructor: function(config, kineticObject) {
      var me, shapeConfig;
      if (kineticObject == null) {
        kineticObject = null;
      }
      Ext.apply(this.getInitialAttrs(), config.initialAttrs);
      this.initConfig(config);
      this.callParent(arguments);
      me = this;
      shapeConfig = this.getInitialAttrs();
      shapeConfig.drawFunc = function(context) {
        var height, width;
        width = me.currentWidth = this.getWidth();
        height = me.currentHeight = this.getHeight();
        me.currentContext = context;
        context.beginPath();
        me.drawFunction(context, width, height);
        context.closePath();
        return context.fillStrokeShape(this);
      };
      if (kineticObject != null) {
        kineticObject.setAttrs(shapeConfig);
      } else {
        kineticObject = new Kinetic.Shape(shapeConfig);
      }
      this.callParent([config, kineticObject]);
    },
    drawFunction: function(ctx, width, height) {
      var p;
      p = this.getPoints();
      ctx.moveTo(p.a.x(), p.a.y());
      ctx.lineTo(p.b.x(), p.b.y());
      ctx.lineTo(p.c.x(), p.c.y());
      ctx.lineTo(p.d.x(), p.d.y());
    },
    setAttrs: function(attrs) {
      return this.kineticObject.setAttrs(attrs);
    },
    get: function() {
      return this.kineticObject;
    },
    applyPoints: function(points) {
      var key, me, point;
      me = this;
      for (key in points) {
        point = points[key];
        point.x = function() {
          return this[0] * me.currentWidth;
        };
        point.y = function() {
          return this[1] * me.currentHeight;
        };
      }
      return points;
    },
    getPoint: function(point) {
      return {
        x: point[0] * this.currentWidth,
        y: point[1] * this.currentHeight
      };
    },
    bezier2: function(a, b) {
      return this.currentContext.quadraticCurveTo(a.x(), a.y(), b.x(), b.y());
    },
    bezier3: function(a, b, c) {
      a = this.getPoint(a);
      b = this.getPoint(b);
      c = this.getPoint(c);
      return this.currentContext.bezierCurveTo(a.x, a.y, b.x, b.y, c.x, c.y);
    },
    deflection: function(aX, aY, bX, bY, balance) {
      var controlX, controlY, middleX, middleY, px, py, vecX, vecY;
      middleX = (aX + bX) / 2;
      middleY = (aY + bY) / 2;
      vecX = bX - middleX;
      vecY = bY - middleY;
      px = -vecY;
      py = +vecX;
      controlX = middleX + px * balance;
      controlY = middleY + py * balance;
      return this.currentContext.quadraticCurveTo(controlX, controlY, bX, bY);
    },
    deflectionPoint: function(a, b, balance) {
      var aX, aY;
      aX = a.x();
      aY = a.y();
      return this.deflection(aX, aY, b.x(), b.y(), balance);
    }
  });

}).call(this);

//# sourceMappingURL=ComponentWrapper.map
